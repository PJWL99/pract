package assignments;

public class MinimumSpanningTree {
	 
    public static int V = 6;
 
    int minKey(int key[], Boolean mstSet[])
    {
        int min = Integer.MAX_VALUE, min_index = -1;
 
        for (int v = 0; v < V; v++)
            if (mstSet[v] == false && key[v] < min) {
                min = key[v];
                min_index = v;
            }
 
        return min_index;
    }
 
    void printMST(int parent[], int graph[][])
    {
        System.out.println("Edge \tWeight");
        for (int i = 1; i < V; i++)
            System.out.println(parent[i] + " - " + i + "\t"
                               + graph[i][parent[i]]);
    }
    
    int weightOfMST(int parent[], int graph[][])
    {
    	int weightOfMST = 0;
    	for (int i = 1; i < V; i++) {
    		weightOfMST += graph[i][parent[i]];
    	}
    	
    	return weightOfMST;
    }
 

    void MST_using_Prims_Algorithm(int graph[][])
    {
        
        int parent[] = new int[V];
 
        int key[] = new int[V];
 
        Boolean mstSet[] = new Boolean[V];
 
        for (int i = 0; i < V; i++) {
            key[i] = Integer.MAX_VALUE;
            mstSet[i] = false;
        }

        key[0] = 0;
       
        parent[0] = 0;
 
        for (int count = 0; count < V - 1; count++) {
             
            int u = minKey(key, mstSet);
            mstSet[u] = true;
 
             for (int v = 0; v < V; v++)
 
                if (graph[u][v] != 0 && mstSet[v] == false && graph[u][v] < key[v]) {
                    parent[v] = u;
                    key[v] = graph[u][v];
                }
        }

        printMST(parent, graph);
        
        System.out.println("\nThe weight of minimum spanning tree is: " + weightOfMST(parent, graph));
    }
 
    public static void main(String[] args)
    {
    	MinimumSpanningTree minSpannigTree = new MinimumSpanningTree();
        
        System.out.println("Minimum Spanning Tree using Prim's Algorithm:\n");
        
        /*
         Graph:
          
          
          			6
              (1)-------(3)
             / |	  / | \
           7/  |	 /	|  \5
           /   |	/	|	\
         (0)  3|   /4  2|	(5)
           \   |  /		|	/
           8\  | /		|  /2
             \ |/		| /
              (2)------(4)
          			3
         */
        
        
        int graph[][] = new int[][] { { 0, 7, 8, 0, 0, 0 },
                                      { 7, 0, 3, 6, 0, 0 },
                                      { 8, 3, 0, 4, 3, 0 },
                                      { 0, 6, 4, 0, 2, 5 },
                                      { 0, 0, 3, 2, 0, 2 },
                                      { 0, 0, 0, 5, 2, 0 }};
        
        minSpannigTree.MST_using_Prims_Algorithm(graph);
    }
}

