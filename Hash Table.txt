package assignments;
import java.util.*;

class LinearProbingHashTable {
	
	private int currentSize, maxSize;
	private String[] keys;
	private String[] vals;

	
	public LinearProbingHashTable(int capacity)
	{
		currentSize = 0;
		maxSize = capacity;
		keys = new String[maxSize];
		vals = new String[maxSize];
	}

	
	public void makeEmpty()
	{
		currentSize = 0;
		keys = new String[maxSize];
		vals = new String[maxSize];
	}

	
	public int getSize() { return currentSize; }

	public boolean isFull()
	{
		return currentSize == maxSize;
	}


	public boolean isEmpty() { return getSize() == 0; }

	
	public boolean contains(String key)
	{
		return get(key) != null;
	}

	
	private int hash(String key)
	{
		return key.hashCode() % maxSize;
	}

	
	public void insert(String key, String val)
	{
		int tmp = hash(key);
		int i = tmp;

		
		do {
			if (keys[i] == null) {
				keys[i] = key;
				vals[i] = val;
				currentSize++;
				return;
			}

			if (keys[i].equals(key)) {
				vals[i] = val;
				return;
			}

			i = (i + 1) % maxSize;

		}
		
		while (i != tmp);
	}

	
	public String get(String key)
	{
		int i = hash(key);
		String notFound = "Data not found.";
		while (keys[i] != null) {
			if (keys[i].equals(key))
				return vals[i];
			i = (i + 1) % maxSize;
		}
		
		return notFound;
	}

	
	public void remove(String key)
	{
		if (!contains(key))
			return;

		int i = hash(key);
		while (!key.equals(keys[i]))
			i = (i + 1) % maxSize;
		keys[i] = vals[i] = null;


		for (i = (i + 1) % maxSize; keys[i] != null; i = (i + 1) % maxSize) {
			String tmp1 = keys[i], tmp2 = vals[i];
			keys[i] = vals[i] = null;
			currentSize--;
			insert(tmp1, tmp2);
		}
		currentSize--;
	}

	
	public void printHashTable()
	{
		System.out.println("\nHash Table: ");
		for (int i = 0; i < maxSize; i++)
			if (keys[i] != null)
				System.out.println(keys[i] + " " + vals[i]);
		System.out.println();
	}
}


public class HashTable {
	
	public static void main(String[] args)
	{
		
		Scanner scan = new Scanner(System.in);

		System.out.println("Enter size of Hash Table:");

		
		LinearProbingHashTable linearProbingHashTable
			= new LinearProbingHashTable(scan.nextInt());
		
		String answer = "";
		while(true) {
			String choice = "";
			System.out.println("\nHash Table Operations:");
			System.out.println("1. Insert ");
			System.out.println("2. Remove");
			System.out.println("3. Get");
			System.out.println("4. Clear");
			System.out.println("5. Size");
			
			choice = scan.next();
			
			switch (choice) {

			case "1":
				if(linearProbingHashTable.isFull()) {
					System.out.println("Hash table is already full.");
					continue;
				}
				System.out.println("Enter key and value");
				linearProbingHashTable.insert(scan.next(), scan.next());
				break;
			case "2":
				if(linearProbingHashTable.isEmpty()) {
					System.out.println("Hash table is already empty.");
					continue;
				}
				System.out.println("Enter key");
				linearProbingHashTable.remove(scan.next());
				break;
			case "3":
				System.out.println("Enter key:");
				String find = scan.next();
				System.out.println("Value = " + linearProbingHashTable.get(find));
				break;
			case "4":
				linearProbingHashTable.makeEmpty();
				System.out.println("Hash Table Cleared\n");
				break;
			case "5":
				System.out.println("Size = " + linearProbingHashTable.getSize());
				break;
			default:
				System.out.println("Wrong Entry.\n ");
				break;
			}

			linearProbingHashTable.printHashTable();

			System.out.println("\nDo you want to continue?");
			System.out.println("[Type 'yes' to continue. Press any other key to exit.]");
			scan.nextLine();
			answer = scan.nextLine();
			if(!answer.equalsIgnoreCase("yes")) {
				break;
			}
		}
		
		System.out.println("\nProgram finished.");
		
		scan.close();
	}
}
